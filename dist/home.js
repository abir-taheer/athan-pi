"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = "<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .switch {\n        position: relative;\n        display: inline-block;\n        width: 60px;\n        height: 34px;\n        transform: scale(0.8);\n      }\n\n      .switch input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n      }\n\n      .slider {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: #ccc;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n      }\n\n      .slider:before {\n        position: absolute;\n        content: \"\";\n        height: 26px;\n        width: 26px;\n        left: 4px;\n        bottom: 4px;\n        background-color: white;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n      }\n\n      input:checked + .slider {\n        background-color: #2196f3;\n      }\n\n      input:focus + .slider {\n        box-shadow: 0 0 1px #2196f3;\n      }\n\n      input:checked + .slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        transform: translateX(26px);\n      }\n\n      /* Rounded sliders */\n      .slider.round {\n        border-radius: 34px;\n      }\n\n      .slider.round:before {\n        border-radius: 50%;\n      }\n      body {\n        padding: 20px;\n      }\n      .center {\n        text-align: center;\n      }\n      .loader {\n        font-size: 10px;\n        margin: 50px auto;\n        text-indent: -9999em;\n        width: 11em;\n        height: 11em;\n        border-radius: 50%;\n        background: #ffffff;\n        background: -moz-linear-gradient(\n          left,\n          #ffffff 10%,\n          rgba(255, 255, 255, 0) 42%\n        );\n        background: -webkit-linear-gradient(\n          left,\n          #ffffff 10%,\n          rgba(255, 255, 255, 0) 42%\n        );\n        background: -o-linear-gradient(\n          left,\n          #ffffff 10%,\n          rgba(255, 255, 255, 0) 42%\n        );\n        background: -ms-linear-gradient(\n          left,\n          #ffffff 10%,\n          rgba(255, 255, 255, 0) 42%\n        );\n        background: linear-gradient(\n          to right,\n          #ffffff 10%,\n          rgba(255, 255, 255, 0) 42%\n        );\n        position: relative;\n        -webkit-animation: load3 1.4s infinite linear;\n        animation: load3 1.4s infinite linear;\n        -webkit-transform: translateZ(0);\n        -ms-transform: translateZ(0);\n        transform: translateZ(0);\n      }\n      .loader:before {\n        width: 50%;\n        height: 50%;\n        background: #ffffff;\n        border-radius: 100% 0 0 0;\n        position: absolute;\n        top: 0;\n        left: 0;\n        content: \"\";\n      }\n      .loader:after {\n        background: #0dc5c1;\n        width: 75%;\n        height: 75%;\n        border-radius: 50%;\n        content: \"\";\n        margin: auto;\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n      }\n      @-webkit-keyframes load3 {\n        0% {\n          -webkit-transform: rotate(0deg);\n          transform: rotate(0deg);\n        }\n        100% {\n          -webkit-transform: rotate(360deg);\n          transform: rotate(360deg);\n        }\n      }\n      @keyframes load3 {\n        0% {\n          -webkit-transform: rotate(0deg);\n          transform: rotate(0deg);\n        }\n        100% {\n          -webkit-transform: rotate(360deg);\n          transform: rotate(360deg);\n        }\n      }\n    </style>\n    <title>Set Up Athan</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\"\n    />\n    <script defer src=\"https://code.getmdl.io/1.3.0/material.min.js\"></script>\n    <script\n      src=\"https://unpkg.com/react@18/umd/react.production.min.js\"\n      crossorigin\n    ></script>\n    <script\n      src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"\n      crossorigin\n    ></script>\n    <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n    <script>\n      function postApi(url, body) {\n        return fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(body),\n        }).then((response) => response.json());\n      }\n    </script>\n  </head>\n\n  <body>\n    <div id=\"root\"></div>\n\n    <script type=\"text/babel\">\n      const allPrayers = [\"fajr\", \"dhuhr\", \"asr\", \"maghrib\", \"isha\"];\n\n      const useState = React.useState;\n      const useEffect = React.useEffect;\n\n      function useApi(url) {\n        const [data, setData] = useState(null);\n        const [error, setError] = useState(null);\n        const [loading, setLoading] = useState(false);\n\n        const refetch = React.useCallback(() => {\n          setLoading(true);\n          fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n              setData(data);\n              setLoading(false);\n            })\n            .catch((error) => {\n              setError(error);\n              setLoading(false);\n            });\n        }, [url]);\n\n        useEffect(() => {\n          refetch();\n        }, [refetch]);\n\n        return { data, error, loading, refetch };\n      }\n\n      function App() {\n        return (\n          <div>\n            <h2 className=\"center\">Manage Athan Settings</h2>\n\n            <CityInput />\n            <AllDevices />\n          </div>\n        );\n      }\n\n      function PrayerTimes() {\n        const { data, loading, error, refetch } = useApi(\"/api/prayertimes\");\n\n        if (loading) {\n          return <div className=\"loader\"></div>;\n        }\n\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        }\n\n        if (!data) {\n          return <div>No data</div>;\n        }\n\n        return (\n          <div>\n            <p className=\"center\">Prayer Times:</p>\n\n            {Object.keys(data).map((p) => (\n              <p>\n                {p}: {new Date(data[p]).toLocaleTimeString()}\n              </p>\n            ))}\n          </div>\n        );\n      }\n\n      function CityInput() {\n        const { data, error, loading, refetch } = useApi(\"/api/settings/list\");\n\n        const [city, setCity] = useState(\"\");\n        useEffect(() => {\n          if (data && data.city) {\n            setCity(data.city);\n          }\n        }, [data]);\n\n        function save() {\n          postApi(\"/api/settings/update/city\", {\n            value: city,\n          }).then(() => {\n            refetch();\n          });\n        }\n\n        return (\n          <div className=\"center\">\n            {data && data.city && <PrayerTimes />}\n            <br />\n            <div className=\"center\">\n              City:{\" \"}\n              <input\n                type=\"text\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n              />\n              <br />\n              <button\n                style={{\n                  backgroundColor: \"#0dc5c1\",\n                  color: \"white\",\n                  border: \"none\",\n                  padding: \"10px 20px\",\n                  borderRadius: \"4px\",\n                  cursor: \"pointer\",\n                  marginTop: \"10px\",\n                }}\n                onClick={save}\n              >\n                Save City\n              </button>\n            </div>\n          </div>\n        );\n      }\n\n      function ScanButton({ refetch }) {\n        const [scanning, setScanning] = useState(false);\n\n        function handleClick() {\n          setScanning(true);\n          fetch(\"/api/devices/scan\")\n            .then((response) => response.json())\n            .then((data) => {\n              setScanning(false);\n              refetch();\n            });\n        }\n\n        if (scanning) {\n          return (\n            <div>\n              <p className=\"center\">Scanning</p>\n              <div className=\"loader center\">Scanning...</div>\n            </div>\n          );\n        }\n\n        return (\n          <button\n            onClick={handleClick}\n            style={{\n              fontSize: 18,\n              background: \"purple\",\n              color: \"white\",\n              padding: 10,\n              borderRadius: 20,\n              marginBottom: 20,\n            }}\n          >\n            Scan for New Devices\n          </button>\n        );\n      }\n\n      function AllDevices() {\n        const { data, error, loading, refetch } = useApi(\"/api/devices/list\");\n\n        if (loading) {\n          return <div>Loading...</div>;\n        }\n\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        }\n\n        if (!data) {\n          return <div>No devices found</div>;\n        }\n\n        return (\n          <div>\n            <h3 className=\"center\">Devices</h3>\n            <div className=\"center\">\n              <ScanButton refetch={refetch} />\n\n              {data && !data.length && (\n                <div className=\"center\">No devices found</div>\n              )}\n            </div>\n\n            {data.map((device) => (\n              <Device {...device} key={device.name} refetch={refetch} />\n            ))}\n          </div>\n        );\n      }\n\n      function Device({\n        id,\n        name,\n        friendlyName,\n        volume,\n        enabled,\n        prayers,\n        refetch,\n      }) {\n        const [newPrayers, setNewPrayers] = useState(prayers);\n        const [newVolume, setNewVolume] = useState(volume);\n        const [newEnabled, setNewEnabled] = useState(enabled);\n\n        const changesMade =\n          newPrayers.toString() !== prayers.toString() ||\n          volume !== newVolume ||\n          newEnabled !== enabled;\n\n        function togglePrayer(prayer) {\n          const newerPrayers = [...newPrayers];\n          const index = newerPrayers.indexOf(prayer);\n          if (index === -1) {\n            newerPrayers.push(prayer);\n          } else {\n            newerPrayers.splice(index, 1);\n          }\n          setNewPrayers(newerPrayers);\n        }\n\n        function save() {\n          postApi(\"/api/devices/update/\" + id, {\n            prayers: newPrayers,\n            volume: newVolume,\n            enabled: newEnabled,\n          }).then(() => {\n            refetch();\n          });\n        }\n\n        return (\n          <div>\n            <div\n              style={{\n                border: \"1px solid grey\",\n                borderRadius: 20,\n                padding: 20,\n                maxWidth: \"calc(90vw - 20px)\",\n              }}\n            >\n              <p>\n                {changesMade && (\n                  <p style={{ color: \"red\" }}>You have unsaved changes</p>\n                )}\n              </p>\n              <h5>Friendly Name: {friendlyName}</h5>\n              <p>Full Name: {name}</p>\n              <h6>Enabled: </h6>\n\n              <label class=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={newEnabled}\n                  onChange={() => setNewEnabled(!newEnabled)}\n                />\n                <span class=\"slider round\"></span>\n              </label>\n              <br />\n\n              <h6>Volume: </h6>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"1\"\n                pattern=\"[0-1].[0-9]+*\"\n                style={{ width: 50 }}\n                step=\"0.1\"\n                value={newVolume}\n                onChange={(e) => setNewVolume(e.target.value)}\n              />\n              <br />\n\n              <p>Prayers:</p>\n              <p>Select which prayers you want to be played on this device</p>\n\n              {allPrayers.map((p) => (\n                <div key={p}>\n                  <input\n                    type=\"checkbox\"\n                    checked={newPrayers.includes(p)}\n                    onChange={() => togglePrayer(p)}\n                  />{\" \"}\n                  {p}\n                </div>\n              ))}\n\n              <br />\n\n              {changesMade && (\n                <button\n                  style={{\n                    backgroundColor: \"#0dc5c1\",\n                    color: \"white\",\n                    border: \"none\",\n                    padding: \"10px 20px\",\n                    borderRadius: \"4px\",\n                    cursor: \"pointer\",\n                    marginTop: \"10px\",\n                  }}\n                  onClick={save}\n                >\n                  Save Changes\n                </button>\n              )}\n            </div>\n            <br />\n            <hr />\n          </div>\n        );\n      }\n\n      ReactDOM.render(<App />, document.getElementById(\"root\"));\n    </script>\n  </body>\n</html>\n";
//# sourceMappingURL=home.js.map